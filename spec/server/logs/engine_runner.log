Loading mods from "/Users/pblack/code/mine/screeps/main/screeps/spec/server/db.json"
Connecting to storage
New child runtime process 20792
Loading mods from "/Users/pblack/code/mine/screeps/main/screeps/spec/server/db.json"
Connecting to storage
game/490 { gc: undefined,
  Promise: undefined,
  RawMemory: {},
  console: {},
  _: 
   { [Function: lodash]
     support: {},
     templateSettings: 
      { escape: /<%-([\s\S]+?)%>/g,
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        variable: '',
        imports: [Object] },
     after: [Function: after],
     ary: [Function: ary],
     assign: [Function],
     at: [Function],
     before: [Function: before],
     bind: { [Function] placeholder: [Circular] },
     bindAll: [Function],
     bindKey: { [Function] placeholder: [Circular] },
     callback: [Function: callback],
     chain: [Function: chain],
     chunk: [Function: chunk],
     compact: [Function: compact],
     constant: [Function: constant],
     countBy: [Function],
     create: [Function: create],
     curry: { [Function: curryFunc] placeholder: [Circular] },
     curryRight: { [Function: curryFunc] placeholder: [Circular] },
     debounce: [Function: debounce],
     defaults: [Function],
     defaultsDeep: [Function],
     defer: [Function],
     delay: [Function],
     difference: [Function],
     drop: [Function: drop],
     dropRight: [Function: dropRight],
     dropRightWhile: [Function: dropRightWhile],
     dropWhile: [Function: dropWhile],
     fill: [Function: fill],
     filter: [Function: filter],
     flatten: [Function: flatten],
     flattenDeep: [Function: flattenDeep],
     flow: [Function],
     flowRight: [Function],
     forEach: [Function],
     forEachRight: [Function],
     forIn: [Function],
     forInRight: [Function],
     forOwn: [Function],
     forOwnRight: [Function],
     functions: [Function: functions],
     groupBy: [Function],
     indexBy: [Function],
     initial: [Function: initial],
     intersection: [Function],
     invert: [Function: invert],
     invoke: [Function],
     keys: [Function],
     keysIn: [Function: keysIn],
     map: [Function: map],
     mapKeys: [Function],
     mapValues: [Function],
     matches: [Function: matches],
     matchesProperty: [Function: matchesProperty],
     memoize: { [Function: memoize] Cache: [Function: MapCache] },
     merge: [Function],
     method: [Function],
     methodOf: [Function],
     mixin: [Function: mixin],
     modArgs: [Function],
     negate: [Function: negate],
     omit: [Function],
     once: [Function: once],
     pairs: [Function: pairs],
     partial: { [Function] placeholder: [Circular] },
     partialRight: { [Function] placeholder: [Circular] },
     partition: [Function],
     pick: [Function],
     pluck: [Function: pluck],
     property: [Function: property],
     propertyOf: [Function: propertyOf],
     pull: [Function: pull],
     pullAt: [Function],
     range: [Function: range],
     rearg: [Function],
     reject: [Function: reject],
     remove: [Function: remove],
     rest: [Function: rest],
     restParam: [Function: restParam],
     set: [Function: set],
     shuffle: [Function: shuffle],
     slice: [Function: slice],
     sortBy: [Function: sortBy],
     sortByAll: [Function],
     sortByOrder: [Function: sortByOrder],
     spread: [Function: spread],
     take: [Function: take],
     takeRight: [Function: takeRight],
     takeRightWhile: [Function: takeRightWhile],
     takeWhile: [Function: takeWhile],
     tap: [Function: tap],
     throttle: [Function: throttle],
     thru: [Function: thru],
     times: [Function: times],
     toArray: [Function: toArray],
     toPlainObject: [Function: toPlainObject],
     transform: [Function: transform],
     union: [Function],
     uniq: [Function: uniq],
     unzip: [Function: unzip],
     unzipWith: [Function: unzipWith],
     values: [Function: values],
     valuesIn: [Function: valuesIn],
     where: [Function: where],
     without: [Function],
     wrap: [Function: wrap],
     xor: [Function: xor],
     zip: [Function],
     zipObject: [Function: zipObject],
     zipWith: [Function],
     backflow: [Function],
     collect: [Function: map],
     compose: [Function],
     each: [Function],
     eachRight: [Function],
     extend: [Function],
     iteratee: [Function: callback],
     methods: [Function: functions],
     object: [Function: zipObject],
     select: [Function: filter],
     tail: [Function: rest],
     unique: [Function: uniq],
     add: [Function: add],
     attempt: [Function],
     camelCase: [Function],
     capitalize: [Function: capitalize],
     ceil: [Function],
     clone: [Function: clone],
     cloneDeep: [Function: cloneDeep],
     deburr: [Function: deburr],
     endsWith: [Function: endsWith],
     escape: [Function: escape],
     escapeRegExp: [Function: escapeRegExp],
     every: [Function: every],
     find: [Function],
     findIndex: [Function],
     findKey: [Function],
     findLast: [Function],
     findLastIndex: [Function],
     findLastKey: [Function],
     findWhere: [Function: findWhere],
     first: [Function: first],
     floor: [Function],
     get: [Function: get],
     gt: [Function: gt],
     gte: [Function: gte],
     has: [Function: has],
     identity: [Function: identity],
     includes: [Function: includes],
     indexOf: [Function: indexOf],
     inRange: [Function: inRange],
     isArguments: [Function: isArguments],
     isArray: [Function: isArray],
     isBoolean: [Function: isBoolean],
     isDate: [Function: isDate],
     isElement: [Function: isElement],
     isEmpty: [Function: isEmpty],
     isEqual: [Function: isEqual],
     isError: [Function: isError],
     isFinite: [Function: isFinite],
     isFunction: [Function: isFunction],
     isMatch: [Function: isMatch],
     isNaN: [Function: isNaN],
     isNative: [Function: isNative],
     isNull: [Function: isNull],
     isNumber: [Function: isNumber],
     isObject: [Function: isObject],
     isPlainObject: [Function: isPlainObject],
     isRegExp: [Function: isRegExp],
     isString: [Function: isString],
     isTypedArray: [Function: isTypedArray],
     isUndefined: [Function: isUndefined],
     kebabCase: [Function],
     last: [Function: last],
     lastIndexOf: [Function: lastIndexOf],
     lt: [Function: lt],
     lte: [Function: lte],
     max: [Function],
     min: [Function],
     noConflict: [Function: noConflict],
     noop: [Function: noop],
     now: [Function: now],
     pad: [Function: pad],
     padLeft: [Function],
     padRight: [Function],
     parseInt: [Function: parseInt],
     random: [Function: random],
     reduce: [Function],
     reduceRight: [Function],
     repeat: [Function: repeat],
     result: [Function: result],
     round: [Function],
     runInContext: [Function: runInContext],
     size: [Function: size],
     snakeCase: [Function],
     some: [Function: some],
     sortedIndex: [Function],
     sortedLastIndex: [Function],
     startCase: [Function],
     startsWith: [Function: startsWith],
     sum: [Function: sum],
     template: [Function: template],
     trim: [Function: trim],
     trimLeft: [Function: trimLeft],
     trimRight: [Function: trimRight],
     trunc: [Function: trunc],
     unescape: [Function: unescape],
     uniqueId: [Function: uniqueId],
     words: [Function: words],
     all: [Function: every],
     any: [Function: some],
     contains: [Function: includes],
     eq: [Function: isEqual],
     detect: [Function],
     foldl: [Function],
     foldr: [Function],
     head: [Function: first],
     include: [Function: includes],
     inject: [Function],
     sample: [Function: sample],
     VERSION: '3.10.1' },
  Memory: [Getter],
  Room: { [Function] serializePath: [Function], deserializePath: [Function] },
  RoomVisual: [Function],
  RoomPosition: [Function],
  RoomObject: [Function],
  Creep: [Function],
  Structure: [Function],
  OwnedStructure: [Function],
  StructureContainer: [Function],
  StructureController: [Function],
  StructureExtension: [Function],
  StructureExtractor: [Function],
  StructureKeeperLair: [Function],
  StructureLab: [Function],
  StructureLink: [Function],
  StructureObserver: [Function],
  StructurePowerBank: [Function],
  StructurePowerSpawn: [Function],
  StructureRampart: [Function],
  StructureRoad: [Function],
  StructureStorage: [Function],
  StructureTerminal: [Function],
  StructureTower: [Function],
  StructureWall: [Function],
  StructureSpawn: { [Function] Spawning: [Function] },
  Spawn: { [Function] Spawning: [Function] },
  StructureNuker: [Function],
  StructurePortal: [Function],
  Source: [Function],
  Mineral: [Function],
  Nuke: [Function],
  Resource: [Function],
  Energy: [Function],
  Flag: [Function],
  Tombstone: [Function],
  ConstructionSite: [Function],
  PathFinder: 
   { CostMatrix: { [Function] deserialize: [Function] },
     search: [Function],
     use: [Function] },
  OK: 0,
  ERR_NOT_OWNER: -1,
  ERR_NO_PATH: -2,
  ERR_NAME_EXISTS: -3,
  ERR_BUSY: -4,
  ERR_NOT_FOUND: -5,
  ERR_NOT_ENOUGH_ENERGY: -6,
  ERR_NOT_ENOUGH_RESOURCES: -6,
  ERR_INVALID_TARGET: -7,
  ERR_FULL: -8,
  ERR_NOT_IN_RANGE: -9,
  ERR_INVALID_ARGS: -10,
  ERR_TIRED: -11,
  ERR_NO_BODYPART: -12,
  ERR_NOT_ENOUGH_EXTENSIONS: -6,
  ERR_RCL_NOT_ENOUGH: -14,
  ERR_GCL_NOT_ENOUGH: -15,
  FIND_EXIT_TOP: 1,
  FIND_EXIT_RIGHT: 3,
  FIND_EXIT_BOTTOM: 5,
  FIND_EXIT_LEFT: 7,
  FIND_EXIT: 10,
  FIND_CREEPS: 101,
  FIND_MY_CREEPS: 102,
  FIND_HOSTILE_CREEPS: 103,
  FIND_SOURCES_ACTIVE: 104,
  FIND_SOURCES: 105,
  FIND_DROPPED_ENERGY: -106,
  FIND_DROPPED_RESOURCES: 106,
  FIND_STRUCTURES: 107,
  FIND_MY_STRUCTURES: 108,
  FIND_HOSTILE_STRUCTURES: 109,
  FIND_FLAGS: 110,
  FIND_CONSTRUCTION_SITES: 111,
  FIND_MY_SPAWNS: 112,
  FIND_HOSTILE_SPAWNS: 113,
  FIND_MY_CONSTRUCTION_SITES: 114,
  FIND_HOSTILE_CONSTRUCTION_SITES: 115,
  FIND_MINERALS: 116,
  FIND_NUKES: 117,
  FIND_TOMBSTONES: 118,
  TOP: 1,
  TOP_RIGHT: 2,
  RIGHT: 3,
  BOTTOM_RIGHT: 4,
  BOTTOM: 5,
  BOTTOM_LEFT: 6,
  LEFT: 7,
  TOP_LEFT: 8,
  COLOR_RED: 1,
  COLOR_PURPLE: 2,
  COLOR_BLUE: 3,
  COLOR_CYAN: 4,
  COLOR_GREEN: 5,
  COLOR_YELLOW: 6,
  COLOR_ORANGE: 7,
  COLOR_BROWN: 8,
  COLOR_GREY: 9,
  COLOR_WHITE: 10,
  LOOK_CREEPS: 'creep',
  LOOK_ENERGY: 'energy',
  LOOK_RESOURCES: 'resource',
  LOOK_SOURCES: 'source',
  LOOK_MINERALS: 'mineral',
  LOOK_STRUCTURES: 'structure',
  LOOK_FLAGS: 'flag',
  LOOK_CONSTRUCTION_SITES: 'constructionSite',
  LOOK_NUKES: 'nuke',
  LOOK_TERRAIN: 'terrain',
  LOOK_TOMBSTONES: 'tombstone',
  OBSTACLE_OBJECT_TYPES: 
   [ 'spawn',
     'creep',
     'wall',
     'source',
     'constructedWall',
     'extension',
     'link',
     'storage',
     'tower',
     'observer',
     'powerSpawn',
     'powerBank',
     'lab',
     'terminal',
     'nuker' ],
  MOVE: 'move',
  WORK: 'work',
  CARRY: 'carry',
  ATTACK: 'attack',
  RANGED_ATTACK: 'ranged_attack',
  TOUGH: 'tough',
  HEAL: 'heal',
  CLAIM: 'claim',
  BODYPART_COST: 
   { move: 50,
     work: 100,
     attack: 80,
     carry: 50,
     heal: 250,
     ranged_attack: 150,
     tough: 10,
     claim: 600 },
  WORLD_WIDTH: 202,
  WORLD_HEIGHT: 202,
  CREEP_LIFE_TIME: 1500,
  CREEP_CLAIM_LIFE_TIME: 600,
  CREEP_CORPSE_RATE: 0.2,
  CARRY_CAPACITY: 50,
  HARVEST_POWER: 2,
  HARVEST_MINERAL_POWER: 1,
  REPAIR_POWER: 100,
  DISMANTLE_POWER: 50,
  BUILD_POWER: 5,
  ATTACK_POWER: 30,
  UPGRADE_CONTROLLER_POWER: 1,
  RANGED_ATTACK_POWER: 10,
  HEAL_POWER: 12,
  RANGED_HEAL_POWER: 4,
  REPAIR_COST: 0.01,
  DISMANTLE_COST: 0.005,
  RAMPART_DECAY_AMOUNT: 300,
  RAMPART_DECAY_TIME: 100,
  RAMPART_HITS: 1,
  RAMPART_HITS_MAX: 
   { '2': 300000,
     '3': 1000000,
     '4': 3000000,
     '5': 10000000,
     '6': 30000000,
     '7': 100000000,
     '8': 300000000 },
  ENERGY_REGEN_TIME: 300,
  ENERGY_DECAY: 1000,
  SPAWN_HITS: 5000,
  SPAWN_ENERGY_START: 300,
  SPAWN_ENERGY_CAPACITY: 300,
  CREEP_SPAWN_TIME: 3,
  SPAWN_RENEW_RATIO: 1.2,
  SOURCE_ENERGY_CAPACITY: 3000,
  SOURCE_ENERGY_NEUTRAL_CAPACITY: 1500,
  SOURCE_ENERGY_KEEPER_CAPACITY: 4000,
  WALL_HITS: 1,
  WALL_HITS_MAX: 300000000,
  EXTENSION_HITS: 1000,
  EXTENSION_ENERGY_CAPACITY: 
   { '0': 50,
     '1': 50,
     '2': 50,
     '3': 50,
     '4': 50,
     '5': 50,
     '6': 50,
     '7': 100,
     '8': 200 },
  ROAD_HITS: 5000,
  ROAD_WEAROUT: 1,
  ROAD_DECAY_AMOUNT: 100,
  ROAD_DECAY_TIME: 1000,
  LINK_HITS: 1000,
  LINK_HITS_MAX: 1000,
  LINK_CAPACITY: 800,
  LINK_COOLDOWN: 1,
  LINK_LOSS_RATIO: 0.03,
  STORAGE_CAPACITY: 1000000,
  STORAGE_HITS: 10000,
  STRUCTURE_SPAWN: 'spawn',
  STRUCTURE_EXTENSION: 'extension',
  STRUCTURE_ROAD: 'road',
  STRUCTURE_WALL: 'constructedWall',
  STRUCTURE_RAMPART: 'rampart',
  STRUCTURE_KEEPER_LAIR: 'keeperLair',
  STRUCTURE_PORTAL: 'portal',
  STRUCTURE_CONTROLLER: 'controller',
  STRUCTURE_LINK: 'link',
  STRUCTURE_STORAGE: 'storage',
  STRUCTURE_TOWER: 'tower',
  STRUCTURE_OBSERVER: 'observer',
  STRUCTURE_POWER_BANK: 'powerBank',
  STRUCTURE_POWER_SPAWN: 'powerSpawn',
  STRUCTURE_EXTRACTOR: 'extractor',
  STRUCTURE_LAB: 'lab',
  STRUCTURE_TERMINAL: 'terminal',
  STRUCTURE_CONTAINER: 'container',
  STRUCTURE_NUKER: 'nuker',
  CONSTRUCTION_COST: 
   { spawn: 15000,
     extension: 3000,
     road: 300,
     constructedWall: 1,
     rampart: 1,
     link: 5000,
     storage: 30000,
     tower: 5000,
     observer: 8000,
     powerSpawn: 100000,
     extractor: 5000,
     lab: 50000,
     terminal: 100000,
     container: 5000,
     nuker: 100000 },
  CONSTRUCTION_COST_ROAD_SWAMP_RATIO: 5,
  CONTROLLER_LEVELS: 
   { '1': 200,
     '2': 45000,
     '3': 135000,
     '4': 405000,
     '5': 1215000,
     '6': 3645000,
     '7': 10935000 },
  CONTROLLER_STRUCTURES: 
   { spawn: 
      { '0': 0,
        '1': 1,
        '2': 1,
        '3': 1,
        '4': 1,
        '5': 1,
        '6': 1,
        '7': 2,
        '8': 3 },
     extension: 
      { '0': 0,
        '1': 0,
        '2': 5,
        '3': 10,
        '4': 20,
        '5': 30,
        '6': 40,
        '7': 50,
        '8': 60 },
     link: { '1': 0, '2': 0, '3': 0, '4': 0, '5': 2, '6': 3, '7': 4, '8': 6 },
     road: 
      { '0': 2500,
        '1': 2500,
        '2': 2500,
        '3': 2500,
        '4': 2500,
        '5': 2500,
        '6': 2500,
        '7': 2500,
        '8': 2500 },
     constructedWall: 
      { '1': 0,
        '2': 2500,
        '3': 2500,
        '4': 2500,
        '5': 2500,
        '6': 2500,
        '7': 2500,
        '8': 2500 },
     rampart: 
      { '1': 0,
        '2': 2500,
        '3': 2500,
        '4': 2500,
        '5': 2500,
        '6': 2500,
        '7': 2500,
        '8': 2500 },
     storage: { '1': 0, '2': 0, '3': 0, '4': 1, '5': 1, '6': 1, '7': 1, '8': 1 },
     tower: { '1': 0, '2': 0, '3': 1, '4': 1, '5': 2, '6': 2, '7': 3, '8': 6 },
     observer: { '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 1 },
     powerSpawn: { '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 1 },
     extractor: { '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 1, '7': 1, '8': 1 },
     terminal: { '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 1, '7': 1, '8': 1 },
     lab: { '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 3, '7': 6, '8': 10 },
     container: 
      { '0': 5,
        '1': 5,
        '2': 5,
        '3': 5,
        '4': 5,
        '5': 5,
        '6': 5,
        '7': 5,
        '8': 5 },
     nuker: { '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 1 } },
  CONTROLLER_DOWNGRADE: 
   { '1': 20000,
     '2': 5000,
     '3': 10000,
     '4': 20000,
     '5': 40000,
     '6': 60000,
     '7': 100000,
     '8': 150000 },
  CONTROLLER_DOWNGRADE_RESTORE: 100,
  CONTROLLER_DOWNGRADE_SAFEMODE_THRESHOLD: 5000,
  CONTROLLER_CLAIM_DOWNGRADE: 300,
  CONTROLLER_RESERVE: 1,
  CONTROLLER_RESERVE_MAX: 5000,
  CONTROLLER_MAX_UPGRADE_PER_TICK: 15,
  CONTROLLER_ATTACK_BLOCKED_UPGRADE: 1000,
  CONTROLLER_NUKE_BLOCKED_UPGRADE: 200,
  SAFE_MODE_DURATION: 20000,
  SAFE_MODE_COOLDOWN: 50000,
  SAFE_MODE_COST: 1000,
  TOWER_HITS: 3000,
  TOWER_CAPACITY: 1000,
  TOWER_ENERGY_COST: 10,
  TOWER_POWER_ATTACK: 600,
  TOWER_POWER_HEAL: 400,
  TOWER_POWER_REPAIR: 800,
  TOWER_OPTIMAL_RANGE: 5,
  TOWER_FALLOFF_RANGE: 20,
  TOWER_FALLOFF: 0.75,
  OBSERVER_HITS: 500,
  OBSERVER_RANGE: 10,
  POWER_BANK_HITS: 2000000,
  POWER_BANK_CAPACITY_MAX: 5000,
  POWER_BANK_CAPACITY_MIN: 500,
  POWER_BANK_CAPACITY_CRIT: 0.3,
  POWER_BANK_DECAY: 5000,
  POWER_BANK_HIT_BACK: 0.5,
  POWER_SPAWN_HITS: 5000,
  POWER_SPAWN_ENERGY_CAPACITY: 5000,
  POWER_SPAWN_POWER_CAPACITY: 100,
  POWER_SPAWN_ENERGY_RATIO: 50,
  EXTRACTOR_HITS: 500,
  EXTRACTOR_COOLDOWN: 5,
  LAB_HITS: 500,
  LAB_MINERAL_CAPACITY: 3000,
  LAB_ENERGY_CAPACITY: 2000,
  LAB_BOOST_ENERGY: 20,
  LAB_BOOST_MINERAL: 30,
  LAB_COOLDOWN: 10,
  LAB_REACTION_AMOUNT: 5,
  GCL_POW: 2.4,
  GCL_MULTIPLY: 1000000,
  GCL_NOVICE: 3,
  MODE_SIMULATION: null,
  MODE_WORLD: null,
  TERRAIN_MASK_WALL: 1,
  TERRAIN_MASK_SWAMP: 2,
  TERRAIN_MASK_LAVA: 4,
  MAX_CONSTRUCTION_SITES: 100,
  MAX_CREEP_SIZE: 50,
  MINERAL_REGEN_TIME: 50000,
  MINERAL_MIN_AMOUNT: 
   { H: 35000,
     O: 35000,
     L: 35000,
     K: 35000,
     Z: 35000,
     U: 35000,
     X: 35000 },
  MINERAL_RANDOM_FACTOR: 2,
  MINERAL_DENSITY: { '1': 15000, '2': 35000, '3': 70000, '4': 100000 },
  MINERAL_DENSITY_PROBABILITY: { '1': 0.1, '2': 0.5, '3': 0.9, '4': 1 },
  MINERAL_DENSITY_CHANGE: 0.05,
  DENSITY_LOW: 1,
  DENSITY_MODERATE: 2,
  DENSITY_HIGH: 3,
  DENSITY_ULTRA: 4,
  TERMINAL_CAPACITY: 300000,
  TERMINAL_HITS: 3000,
  TERMINAL_SEND_COST: 0.1,
  TERMINAL_MIN_SEND: 100,
  TERMINAL_COOLDOWN: 10,
  CONTAINER_HITS: 250000,
  CONTAINER_CAPACITY: 2000,
  CONTAINER_DECAY: 5000,
  CONTAINER_DECAY_TIME: 100,
  CONTAINER_DECAY_TIME_OWNED: 500,
  NUKER_HITS: 1000,
  NUKER_COOLDOWN: 100000,
  NUKER_ENERGY_CAPACITY: 300000,
  NUKER_GHODIUM_CAPACITY: 5000,
  NUKE_LAND_TIME: 50000,
  NUKE_RANGE: 10,
  NUKE_DAMAGE: { '0': 10000000, '2': 5000000 },
  TOMBSTONE_DECAY_PER_PART: 5,
  PORTAL_DECAY: 30000,
  ORDER_SELL: 'sell',
  ORDER_BUY: 'buy',
  MARKET_FEE: 0.05,
  FLAGS_LIMIT: 10000,
  SUBSCRIPTION_TOKEN: 'token',
  RESOURCE_ENERGY: 'energy',
  RESOURCE_POWER: 'power',
  RESOURCE_HYDROGEN: 'H',
  RESOURCE_OXYGEN: 'O',
  RESOURCE_UTRIUM: 'U',
  RESOURCE_LEMERGIUM: 'L',
  RESOURCE_KEANIUM: 'K',
  RESOURCE_ZYNTHIUM: 'Z',
  RESOURCE_CATALYST: 'X',
  RESOURCE_GHODIUM: 'G',
  RESOURCE_HYDROXIDE: 'OH',
  RESOURCE_ZYNTHIUM_KEANITE: 'ZK',
  RESOURCE_UTRIUM_LEMERGITE: 'UL',
  RESOURCE_UTRIUM_HYDRIDE: 'UH',
  RESOURCE_UTRIUM_OXIDE: 'UO',
  RESOURCE_KEANIUM_HYDRIDE: 'KH',
  RESOURCE_KEANIUM_OXIDE: 'KO',
  RESOURCE_LEMERGIUM_HYDRIDE: 'LH',
  RESOURCE_LEMERGIUM_OXIDE: 'LO',
  RESOURCE_ZYNTHIUM_HYDRIDE: 'ZH',
  RESOURCE_ZYNTHIUM_OXIDE: 'ZO',
  RESOURCE_GHODIUM_HYDRIDE: 'GH',
  RESOURCE_GHODIUM_OXIDE: 'GO',
  RESOURCE_UTRIUM_ACID: 'UH2O',
  RESOURCE_UTRIUM_ALKALIDE: 'UHO2',
  RESOURCE_KEANIUM_ACID: 'KH2O',
  RESOURCE_KEANIUM_ALKALIDE: 'KHO2',
  RESOURCE_LEMERGIUM_ACID: 'LH2O',
  RESOURCE_LEMERGIUM_ALKALIDE: 'LHO2',
  RESOURCE_ZYNTHIUM_ACID: 'ZH2O',
  RESOURCE_ZYNTHIUM_ALKALIDE: 'ZHO2',
  RESOURCE_GHODIUM_ACID: 'GH2O',
  RESOURCE_GHODIUM_ALKALIDE: 'GHO2',
  RESOURCE_CATALYZED_UTRIUM_ACID: 'XUH2O',
  RESOURCE_CATALYZED_UTRIUM_ALKALIDE: 'XUHO2',
  RESOURCE_CATALYZED_KEANIUM_ACID: 'XKH2O',
  RESOURCE_CATALYZED_KEANIUM_ALKALIDE: 'XKHO2',
  RESOURCE_CATALYZED_LEMERGIUM_ACID: 'XLH2O',
  RESOURCE_CATALYZED_LEMERGIUM_ALKALIDE: 'XLHO2',
  RESOURCE_CATALYZED_ZYNTHIUM_ACID: 'XZH2O',
  RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE: 'XZHO2',
  RESOURCE_CATALYZED_GHODIUM_ACID: 'XGH2O',
  RESOURCE_CATALYZED_GHODIUM_ALKALIDE: 'XGHO2',
  REACTIONS: 
   { H: { O: 'OH', L: 'LH', K: 'KH', U: 'UH', Z: 'ZH', G: 'GH' },
     O: { H: 'OH', L: 'LO', K: 'KO', U: 'UO', Z: 'ZO', G: 'GO' },
     Z: { K: 'ZK', H: 'ZH', O: 'ZO' },
     L: { U: 'UL', H: 'LH', O: 'LO' },
     K: { Z: 'ZK', H: 'KH', O: 'KO' },
     G: { H: 'GH', O: 'GO' },
     U: { L: 'UL', H: 'UH', O: 'UO' },
     OH: 
      { UH: 'UH2O',
        UO: 'UHO2',
        ZH: 'ZH2O',
        ZO: 'ZHO2',
        KH: 'KH2O',
        KO: 'KHO2',
        LH: 'LH2O',
        LO: 'LHO2',
        GH: 'GH2O',
        GO: 'GHO2' },
     X: 
      { UH2O: 'XUH2O',
        UHO2: 'XUHO2',
        LH2O: 'XLH2O',
        LHO2: 'XLHO2',
        KH2O: 'XKH2O',
        KHO2: 'XKHO2',
        ZH2O: 'XZH2O',
        ZHO2: 'XZHO2',
        GH2O: 'XGH2O',
        GHO2: 'XGHO2' },
     ZK: { UL: 'G' },
     UL: { ZK: 'G' },
     LH: { OH: 'LH2O' },
     ZH: { OH: 'ZH2O' },
     GH: { OH: 'GH2O' },
     KH: { OH: 'KH2O' },
     UH: { OH: 'UH2O' },
     LO: { OH: 'LHO2' },
     ZO: { OH: 'ZHO2' },
     KO: { OH: 'KHO2' },
     UO: { OH: 'UHO2' },
     GO: { OH: 'GHO2' },
     LH2O: { X: 'XLH2O' },
     KH2O: { X: 'XKH2O' },
     ZH2O: { X: 'XZH2O' },
     UH2O: { X: 'XUH2O' },
     GH2O: { X: 'XGH2O' },
     LHO2: { X: 'XLHO2' },
     UHO2: { X: 'XUHO2' },
     KHO2: { X: 'XKHO2' },
     ZHO2: { X: 'XZHO2' },
     GHO2: { X: 'XGHO2' } },
  BOOSTS: 
   { work: 
      { UO: [Object],
        UHO2: [Object],
        XUHO2: [Object],
        LH: [Object],
        LH2O: [Object],
        XLH2O: [Object],
        ZH: [Object],
        ZH2O: [Object],
        XZH2O: [Object],
        GH: [Object],
        GH2O: [Object],
        XGH2O: [Object] },
     attack: { UH: [Object], UH2O: [Object], XUH2O: [Object] },
     ranged_attack: { KO: [Object], KHO2: [Object], XKHO2: [Object] },
     heal: { LO: [Object], LHO2: [Object], XLHO2: [Object] },
     carry: { KH: [Object], KH2O: [Object], XKH2O: [Object] },
     move: { ZO: [Object], ZHO2: [Object], XZHO2: [Object] },
     tough: { GO: [Object], GHO2: [Object], XGHO2: [Object] } },
  REACTION_TIME: 
   { OH: 20,
     ZK: 5,
     UL: 5,
     UH: 10,
     UH2O: 5,
     XUH2O: 60,
     UO: 10,
     UHO2: 5,
     XUHO2: 60,
     KH: 10,
     KH2O: 5,
     XKH2O: 60,
     KO: 10,
     KHO2: 5,
     XKHO2: 60,
     LH: 15,
     LH2O: 10,
     XLH2O: 65,
     LO: 10,
     LHO2: 5,
     XLHO2: 60,
     ZH: 20,
     ZH2O: 40,
     XZH2O: 160,
     ZO: 10,
     ZHO2: 5,
     XZHO2: 60,
     GH: 10,
     GH2O: 15,
     XGH2O: 80,
     GO: 10,
     GHO2: 30,
     XGHO2: 150 },
  PORTAL_UNSTABLE: 864000000,
  PORTAL_MIN_TIMEOUT: 1036800000,
  PORTAL_MAX_TIMEOUT: 1900800000,
  POWER_BANK_RESPAWN_TIME: 50000,
  INVADERS_ENERGY_GOAL: 100000,
  SYSTEM_USERNAME: 'Screeps',
  SIGN_NOVICE_AREA: 'A new Novice Area is being planned somewhere in this sector. Please make sure all important rooms are reserved.',
  SIGN_RESPAWN_AREA: 'A new Respawn Area is being planned somewhere in this sector. Please make sure all important rooms are reserved.',
  BODYPARTS_ALL: 
   [ 'move',
     'work',
     'carry',
     'attack',
     'ranged_attack',
     'tough',
     'heal',
     'claim' ],
  RESOURCES_ALL: 
   [ 'energy',
     'power',
     'H',
     'O',
     'U',
     'K',
     'L',
     'Z',
     'X',
     'G',
     'OH',
     'ZK',
     'UL',
     'UH',
     'UO',
     'KH',
     'KO',
     'LH',
     'LO',
     'ZH',
     'ZO',
     'GH',
     'GO',
     'UH2O',
     'UHO2',
     'KH2O',
     'KHO2',
     'LH2O',
     'LHO2',
     'ZH2O',
     'ZHO2',
     'GH2O',
     'GHO2',
     'XUH2O',
     'XUHO2',
     'XKH2O',
     'XKHO2',
     'XLH2O',
     'XLHO2',
     'XZH2O',
     'XZHO2',
     'XGH2O',
     'XGHO2' ],
  COLORS_ALL: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ],
  Game: 
   { creeps: {},
     spawns: { Spawn1: [Object] },
     structures: { '8a6ecdfb870d44b': [Object], '4b65cdfb889d868': [Object] },
     flags: {},
     constructionSites: {},
     rooms: { W0N1: [Object] },
     time: 1,
     cpuLimit: 500,
     cpu: 
      { getUsed: [Function: getUsed],
        tickLimit: 500,
        limit: 100,
        bucket: 10000 },
     map: 
      { findRoute: [Function: findRoute],
        findExit: [Function: findExit],
        describeExits: [Function: describeExits],
        isRoomProtected: [Function: isRoomProtected],
        isRoomAvailable: [Function: isRoomAvailable],
        getTerrainAt: [Function: getTerrainAt],
        getRoomLinearDistance: [Function: getRoomLinearDistance],
        getWorldSize: [Function: getWorldSize] },
     gcl: { level: 1, progress: 1, progressTotal: 1000000 },
     market: 
      { calcTransactionCost: [Function],
        getAllOrders: [Function],
        getOrderById: [Function],
        createOrder: [Function],
        cancelOrder: [Function],
        deal: [Function],
        changeOrderPrice: [Function],
        extendOrder: [Function],
        credits: [Getter],
        incomingTransactions: [Getter],
        outgoingTransactions: [Getter],
        orders: [Getter] },
     resources: { token: 0 },
     getObjectById: [Function: getObjectById],
     notify: [Function: notify],
     shard: { name: 'pblack.local', type: 'normal', ptr: false } },
  require: { [Function] cache: { lodash: [Object] }, timestamp: 0 } }
stop
game/490 { gc: undefined,
  Promise: undefined,
  RawMemory: {},
  console: {},
  _: 
   { [Function: lodash]
     support: {},
     templateSettings: 
      { escape: /<%-([\s\S]+?)%>/g,
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        variable: '',
        imports: [Object] },
     after: [Function: after],
     ary: [Function: ary],
     assign: [Function],
     at: [Function],
     before: [Function: before],
     bind: { [Function] placeholder: [Circular] },
     bindAll: [Function],
     bindKey: { [Function] placeholder: [Circular] },
     callback: [Function: callback],
     chain: [Function: chain],
     chunk: [Function: chunk],
     compact: [Function: compact],
     constant: [Function: constant],
     countBy: [Function],
     create: [Function: create],
     curry: { [Function: curryFunc] placeholder: [Circular] },
     curryRight: { [Function: curryFunc] placeholder: [Circular] },
     debounce: [Function: debounce],
     defaults: [Function],
     defaultsDeep: [Function],
     defer: [Function],
     delay: [Function],
     difference: [Function],
     drop: [Function: drop],
     dropRight: [Function: dropRight],
     dropRightWhile: [Function: dropRightWhile],
     dropWhile: [Function: dropWhile],
     fill: [Function: fill],
     filter: [Function: filter],
     flatten: [Function: flatten],
     flattenDeep: [Function: flattenDeep],
     flow: [Function],
     flowRight: [Function],
     forEach: [Function],
     forEachRight: [Function],
     forIn: [Function],
     forInRight: [Function],
     forOwn: [Function],
     forOwnRight: [Function],
     functions: [Function: functions],
     groupBy: [Function],
     indexBy: [Function],
     initial: [Function: initial],
     intersection: [Function],
     invert: [Function: invert],
     invoke: [Function],
     keys: [Function],
     keysIn: [Function: keysIn],
     map: [Function: map],
     mapKeys: [Function],
     mapValues: [Function],
     matches: [Function: matches],
     matchesProperty: [Function: matchesProperty],
     memoize: { [Function: memoize] Cache: [Function: MapCache] },
     merge: [Function],
     method: [Function],
     methodOf: [Function],
     mixin: [Function: mixin],
     modArgs: [Function],
     negate: [Function: negate],
     omit: [Function],
     once: [Function: once],
     pairs: [Function: pairs],
     partial: { [Function] placeholder: [Circular] },
     partialRight: { [Function] placeholder: [Circular] },
     partition: [Function],
     pick: [Function],
     pluck: [Function: pluck],
     property: [Function: property],
     propertyOf: [Function: propertyOf],
     pull: [Function: pull],
     pullAt: [Function],
     range: [Function: range],
     rearg: [Function],
     reject: [Function: reject],
     remove: [Function: remove],
     rest: [Function: rest],
     restParam: [Function: restParam],
     set: [Function: set],
     shuffle: [Function: shuffle],
     slice: [Function: slice],
     sortBy: [Function: sortBy],
     sortByAll: [Function],
     sortByOrder: [Function: sortByOrder],
     spread: [Function: spread],
     take: [Function: take],
     takeRight: [Function: takeRight],
     takeRightWhile: [Function: takeRightWhile],
     takeWhile: [Function: takeWhile],
     tap: [Function: tap],
     throttle: [Function: throttle],
     thru: [Function: thru],
     times: [Function: times],
     toArray: [Function: toArray],
     toPlainObject: [Function: toPlainObject],
     transform: [Function: transform],
     union: [Function],
     uniq: [Function: uniq],
     unzip: [Function: unzip],
     unzipWith: [Function: unzipWith],
     values: [Function: values],
     valuesIn: [Function: valuesIn],
     where: [Function: where],
     without: [Function],
     wrap: [Function: wrap],
     xor: [Function: xor],
     zip: [Function],
     zipObject: [Function: zipObject],
     zipWith: [Function],
     backflow: [Function],
     collect: [Function: map],
     compose: [Function],
     each: [Function],
     eachRight: [Function],
     extend: [Function],
     iteratee: [Function: callback],
     methods: [Function: functions],
     object: [Function: zipObject],
     select: [Function: filter],
     tail: [Function: rest],
     unique: [Function: uniq],
     add: [Function: add],
     attempt: [Function],
     camelCase: [Function],
     capitalize: [Function: capitalize],
     ceil: [Function],
     clone: [Function: clone],
     cloneDeep: [Function: cloneDeep],
     deburr: [Function: deburr],
     endsWith: [Function: endsWith],
     escape: [Function: escape],
     escapeRegExp: [Function: escapeRegExp],
     every: [Function: every],
     find: [Function],
     findIndex: [Function],
     findKey: [Function],
     findLast: [Function],
     findLastIndex: [Function],
     findLastKey: [Function],
     findWhere: [Function: findWhere],
     first: [Function: first],
     floor: [Function],
     get: [Function: get],
     gt: [Function: gt],
     gte: [Function: gte],
     has: [Function: has],
     identity: [Function: identity],
     includes: [Function: includes],
     indexOf: [Function: indexOf],
     inRange: [Function: inRange],
     isArguments: [Function: isArguments],
     isArray: [Function: isArray],
     isBoolean: [Function: isBoolean],
     isDate: [Function: isDate],
     isElement: [Function: isElement],
     isEmpty: [Function: isEmpty],
     isEqual: [Function: isEqual],
     isError: [Function: isError],
     isFinite: [Function: isFinite],
     isFunction: [Function: isFunction],
     isMatch: [Function: isMatch],
     isNaN: [Function: isNaN],
     isNative: [Function: isNative],
     isNull: [Function: isNull],
     isNumber: [Function: isNumber],
     isObject: [Function: isObject],
     isPlainObject: [Function: isPlainObject],
     isRegExp: [Function: isRegExp],
     isString: [Function: isString],
     isTypedArray: [Function: isTypedArray],
     isUndefined: [Function: isUndefined],
     kebabCase: [Function],
     last: [Function: last],
     lastIndexOf: [Function: lastIndexOf],
     lt: [Function: lt],
     lte: [Function: lte],
     max: [Function],
     min: [Function],
     noConflict: [Function: noConflict],
     noop: [Function: noop],
     now: [Function: now],
     pad: [Function: pad],
     padLeft: [Function],
     padRight: [Function],
     parseInt: [Function: parseInt],
     random: [Function: random],
     reduce: [Function],
     reduceRight: [Function],
     repeat: [Function: repeat],
     result: [Function: result],
     round: [Function],
     runInContext: [Function: runInContext],
     size: [Function: size],
     snakeCase: [Function],
     some: [Function: some],
     sortedIndex: [Function],
     sortedLastIndex: [Function],
     startCase: [Function],
     startsWith: [Function: startsWith],
     sum: [Function: sum],
     template: [Function: template],
     trim: [Function: trim],
     trimLeft: [Function: trimLeft],
     trimRight: [Function: trimRight],
     trunc: [Function: trunc],
     unescape: [Function: unescape],
     uniqueId: [Function: uniqueId],
     words: [Function: words],
     all: [Function: every],
     any: [Function: some],
     contains: [Function: includes],
     eq: [Function: isEqual],
     detect: [Function],
     foldl: [Function],
     foldr: [Function],
     head: [Function: first],
     include: [Function: includes],
     inject: [Function],
     sample: [Function: sample],
     VERSION: '3.10.1' },
  Memory: [Getter],
  Room: { [Function] serializePath: [Function], deserializePath: [Function] },
  RoomVisual: [Function],
  RoomPosition: [Function],
  RoomObject: [Function],
  Creep: [Function],
  Structure: [Function],
  OwnedStructure: [Function],
  StructureContainer: [Function],
  StructureController: [Function],
  StructureExtension: [Function],
  StructureExtractor: [Function],
  StructureKeeperLair: [Function],
  StructureLab: [Function],
  StructureLink: [Function],
  StructureObserver: [Function],
  StructurePowerBank: [Function],
  StructurePowerSpawn: [Function],
  StructureRampart: [Function],
  StructureRoad: [Function],
  StructureStorage: [Function],
  StructureTerminal: [Function],
  StructureTower: [Function],
  StructureWall: [Function],
  StructureSpawn: { [Function] Spawning: [Function] },
  Spawn: { [Function] Spawning: [Function] },
  StructureNuker: [Function],
  StructurePortal: [Function],
  Source: [Function],
  Mineral: [Function],
  Nuke: [Function],
  Resource: [Function],
  Energy: [Function],
  Flag: [Function],
  Tombstone: [Function],
  ConstructionSite: [Function],
  PathFinder: 
   { CostMatrix: { [Function] deserialize: [Function] },
     search: [Function],
     use: [Function] },
  OK: 0,
  ERR_NOT_OWNER: -1,
  ERR_NO_PATH: -2,
  ERR_NAME_EXISTS: -3,
  ERR_BUSY: -4,
  ERR_NOT_FOUND: -5,
  ERR_NOT_ENOUGH_ENERGY: -6,
  ERR_NOT_ENOUGH_RESOURCES: -6,
  ERR_INVALID_TARGET: -7,
  ERR_FULL: -8,
  ERR_NOT_IN_RANGE: -9,
  ERR_INVALID_ARGS: -10,
  ERR_TIRED: -11,
  ERR_NO_BODYPART: -12,
  ERR_NOT_ENOUGH_EXTENSIONS: -6,
  ERR_RCL_NOT_ENOUGH: -14,
  ERR_GCL_NOT_ENOUGH: -15,
  FIND_EXIT_TOP: 1,
  FIND_EXIT_RIGHT: 3,
  FIND_EXIT_BOTTOM: 5,
  FIND_EXIT_LEFT: 7,
  FIND_EXIT: 10,
  FIND_CREEPS: 101,
  FIND_MY_CREEPS: 102,
  FIND_HOSTILE_CREEPS: 103,
  FIND_SOURCES_ACTIVE: 104,
  FIND_SOURCES: 105,
  FIND_DROPPED_ENERGY: -106,
  FIND_DROPPED_RESOURCES: 106,
  FIND_STRUCTURES: 107,
  FIND_MY_STRUCTURES: 108,
  FIND_HOSTILE_STRUCTURES: 109,
  FIND_FLAGS: 110,
  FIND_CONSTRUCTION_SITES: 111,
  FIND_MY_SPAWNS: 112,
  FIND_HOSTILE_SPAWNS: 113,
  FIND_MY_CONSTRUCTION_SITES: 114,
  FIND_HOSTILE_CONSTRUCTION_SITES: 115,
  FIND_MINERALS: 116,
  FIND_NUKES: 117,
  FIND_TOMBSTONES: 118,
  TOP: 1,
  TOP_RIGHT: 2,
  RIGHT: 3,
  BOTTOM_RIGHT: 4,
  BOTTOM: 5,
  BOTTOM_LEFT: 6,
  LEFT: 7,
  TOP_LEFT: 8,
  COLOR_RED: 1,
  COLOR_PURPLE: 2,
  COLOR_BLUE: 3,
  COLOR_CYAN: 4,
  COLOR_GREEN: 5,
  COLOR_YELLOW: 6,
  COLOR_ORANGE: 7,
  COLOR_BROWN: 8,
  COLOR_GREY: 9,
  COLOR_WHITE: 10,
  LOOK_CREEPS: 'creep',
  LOOK_ENERGY: 'energy',
  LOOK_RESOURCES: 'resource',
  LOOK_SOURCES: 'source',
  LOOK_MINERALS: 'mineral',
  LOOK_STRUCTURES: 'structure',
  LOOK_FLAGS: 'flag',
  LOOK_CONSTRUCTION_SITES: 'constructionSite',
  LOOK_NUKES: 'nuke',
  LOOK_TERRAIN: 'terrain',
  LOOK_TOMBSTONES: 'tombstone',
  OBSTACLE_OBJECT_TYPES: 
   [ 'spawn',
     'creep',
     'wall',
     'source',
     'constructedWall',
     'extension',
     'link',
     'storage',
     'tower',
     'observer',
     'powerSpawn',
     'powerBank',
     'lab',
     'terminal',
     'nuker' ],
  MOVE: 'move',
  WORK: 'work',
  CARRY: 'carry',
  ATTACK: 'attack',
  RANGED_ATTACK: 'ranged_attack',
  TOUGH: 'tough',
  HEAL: 'heal',
  CLAIM: 'claim',
  BODYPART_COST: 
   { move: 50,
     work: 100,
     attack: 80,
     carry: 50,
     heal: 250,
     ranged_attack: 150,
     tough: 10,
     claim: 600 },
  WORLD_WIDTH: 202,
  WORLD_HEIGHT: 202,
  CREEP_LIFE_TIME: 1500,
  CREEP_CLAIM_LIFE_TIME: 600,
  CREEP_CORPSE_RATE: 0.2,
  CARRY_CAPACITY: 50,
  HARVEST_POWER: 2,
  HARVEST_MINERAL_POWER: 1,
  REPAIR_POWER: 100,
  DISMANTLE_POWER: 50,
  BUILD_POWER: 5,
  ATTACK_POWER: 30,
  UPGRADE_CONTROLLER_POWER: 1,
  RANGED_ATTACK_POWER: 10,
  HEAL_POWER: 12,
  RANGED_HEAL_POWER: 4,
  REPAIR_COST: 0.01,
  DISMANTLE_COST: 0.005,
  RAMPART_DECAY_AMOUNT: 300,
  RAMPART_DECAY_TIME: 100,
  RAMPART_HITS: 1,
  RAMPART_HITS_MAX: 
   { '2': 300000,
     '3': 1000000,
     '4': 3000000,
     '5': 10000000,
     '6': 30000000,
     '7': 100000000,
     '8': 300000000 },
  ENERGY_REGEN_TIME: 300,
  ENERGY_DECAY: 1000,
  SPAWN_HITS: 5000,
  SPAWN_ENERGY_START: 300,
  SPAWN_ENERGY_CAPACITY: 300,
  CREEP_SPAWN_TIME: 3,
  SPAWN_RENEW_RATIO: 1.2,
  SOURCE_ENERGY_CAPACITY: 3000,
  SOURCE_ENERGY_NEUTRAL_CAPACITY: 1500,
  SOURCE_ENERGY_KEEPER_CAPACITY: 4000,
  WALL_HITS: 1,
  WALL_HITS_MAX: 300000000,
  EXTENSION_HITS: 1000,
  EXTENSION_ENERGY_CAPACITY: 
   { '0': 50,
     '1': 50,
     '2': 50,
     '3': 50,
     '4': 50,
     '5': 50,
     '6': 50,
     '7': 100,
     '8': 200 },
  ROAD_HITS: 5000,
  ROAD_WEAROUT: 1,
  ROAD_DECAY_AMOUNT: 100,
  ROAD_DECAY_TIME: 1000,
  LINK_HITS: 1000,
  LINK_HITS_MAX: 1000,
  LINK_CAPACITY: 800,
  LINK_COOLDOWN: 1,
  LINK_LOSS_RATIO: 0.03,
  STORAGE_CAPACITY: 1000000,
  STORAGE_HITS: 10000,
  STRUCTURE_SPAWN: 'spawn',
  STRUCTURE_EXTENSION: 'extension',
  STRUCTURE_ROAD: 'road',
  STRUCTURE_WALL: 'constructedWall',
  STRUCTURE_RAMPART: 'rampart',
  STRUCTURE_KEEPER_LAIR: 'keeperLair',
  STRUCTURE_PORTAL: 'portal',
  STRUCTURE_CONTROLLER: 'controller',
  STRUCTURE_LINK: 'link',
  STRUCTURE_STORAGE: 'storage',
  STRUCTURE_TOWER: 'tower',
  STRUCTURE_OBSERVER: 'observer',
  STRUCTURE_POWER_BANK: 'powerBank',
  STRUCTURE_POWER_SPAWN: 'powerSpawn',
  STRUCTURE_EXTRACTOR: 'extractor',
  STRUCTURE_LAB: 'lab',
  STRUCTURE_TERMINAL: 'terminal',
  STRUCTURE_CONTAINER: 'container',
  STRUCTURE_NUKER: 'nuker',
  CONSTRUCTION_COST: 
   { spawn: 15000,
     extension: 3000,
     road: 300,
     constructedWall: 1,
     rampart: 1,
     link: 5000,
     storage: 30000,
     tower: 5000,
     observer: 8000,
     powerSpawn: 100000,
     extractor: 5000,
     lab: 50000,
     terminal: 100000,
     container: 5000,
     nuker: 100000 },
  CONSTRUCTION_COST_ROAD_SWAMP_RATIO: 5,
  CONTROLLER_LEVELS: 
   { '1': 200,
     '2': 45000,
     '3': 135000,
     '4': 405000,
     '5': 1215000,
     '6': 3645000,
     '7': 10935000 },
  CONTROLLER_STRUCTURES: 
   { spawn: 
      { '0': 0,
        '1': 1,
        '2': 1,
        '3': 1,
        '4': 1,
        '5': 1,
        '6': 1,
        '7': 2,
        '8': 3 },
     extension: 
      { '0': 0,
        '1': 0,
        '2': 5,
        '3': 10,
        '4': 20,
        '5': 30,
        '6': 40,
        '7': 50,
        '8': 60 },
     link: { '1': 0, '2': 0, '3': 0, '4': 0, '5': 2, '6': 3, '7': 4, '8': 6 },
     road: 
      { '0': 2500,
        '1': 2500,
        '2': 2500,
        '3': 2500,
        '4': 2500,
        '5': 2500,
        '6': 2500,
        '7': 2500,
        '8': 2500 },
     constructedWall: 
      { '1': 0,
        '2': 2500,
        '3': 2500,
        '4': 2500,
        '5': 2500,
        '6': 2500,
        '7': 2500,
        '8': 2500 },
     rampart: 
      { '1': 0,
        '2': 2500,
        '3': 2500,
        '4': 2500,
        '5': 2500,
        '6': 2500,
        '7': 2500,
        '8': 2500 },
     storage: { '1': 0, '2': 0, '3': 0, '4': 1, '5': 1, '6': 1, '7': 1, '8': 1 },
     tower: { '1': 0, '2': 0, '3': 1, '4': 1, '5': 2, '6': 2, '7': 3, '8': 6 },
     observer: { '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 1 },
     powerSpawn: { '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 1 },
     extractor: { '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 1, '7': 1, '8': 1 },
     terminal: { '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 1, '7': 1, '8': 1 },
     lab: { '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 3, '7': 6, '8': 10 },
     container: 
      { '0': 5,
        '1': 5,
        '2': 5,
        '3': 5,
        '4': 5,
        '5': 5,
        '6': 5,
        '7': 5,
        '8': 5 },
     nuker: { '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 1 } },
  CONTROLLER_DOWNGRADE: 
   { '1': 20000,
     '2': 5000,
     '3': 10000,
     '4': 20000,
     '5': 40000,
     '6': 60000,
     '7': 100000,
     '8': 150000 },
  CONTROLLER_DOWNGRADE_RESTORE: 100,
  CONTROLLER_DOWNGRADE_SAFEMODE_THRESHOLD: 5000,
  CONTROLLER_CLAIM_DOWNGRADE: 300,
  CONTROLLER_RESERVE: 1,
  CONTROLLER_RESERVE_MAX: 5000,
  CONTROLLER_MAX_UPGRADE_PER_TICK: 15,
  CONTROLLER_ATTACK_BLOCKED_UPGRADE: 1000,
  CONTROLLER_NUKE_BLOCKED_UPGRADE: 200,
  SAFE_MODE_DURATION: 20000,
  SAFE_MODE_COOLDOWN: 50000,
  SAFE_MODE_COST: 1000,
  TOWER_HITS: 3000,
  TOWER_CAPACITY: 1000,
  TOWER_ENERGY_COST: 10,
  TOWER_POWER_ATTACK: 600,
  TOWER_POWER_HEAL: 400,
  TOWER_POWER_REPAIR: 800,
  TOWER_OPTIMAL_RANGE: 5,
  TOWER_FALLOFF_RANGE: 20,
  TOWER_FALLOFF: 0.75,
  OBSERVER_HITS: 500,
  OBSERVER_RANGE: 10,
  POWER_BANK_HITS: 2000000,
  POWER_BANK_CAPACITY_MAX: 5000,
  POWER_BANK_CAPACITY_MIN: 500,
  POWER_BANK_CAPACITY_CRIT: 0.3,
  POWER_BANK_DECAY: 5000,
  POWER_BANK_HIT_BACK: 0.5,
  POWER_SPAWN_HITS: 5000,
  POWER_SPAWN_ENERGY_CAPACITY: 5000,
  POWER_SPAWN_POWER_CAPACITY: 100,
  POWER_SPAWN_ENERGY_RATIO: 50,
  EXTRACTOR_HITS: 500,
  EXTRACTOR_COOLDOWN: 5,
  LAB_HITS: 500,
  LAB_MINERAL_CAPACITY: 3000,
  LAB_ENERGY_CAPACITY: 2000,
  LAB_BOOST_ENERGY: 20,
  LAB_BOOST_MINERAL: 30,
  LAB_COOLDOWN: 10,
  LAB_REACTION_AMOUNT: 5,
  GCL_POW: 2.4,
  GCL_MULTIPLY: 1000000,
  GCL_NOVICE: 3,
  MODE_SIMULATION: null,
  MODE_WORLD: null,
  TERRAIN_MASK_WALL: 1,
  TERRAIN_MASK_SWAMP: 2,
  TERRAIN_MASK_LAVA: 4,
  MAX_CONSTRUCTION_SITES: 100,
  MAX_CREEP_SIZE: 50,
  MINERAL_REGEN_TIME: 50000,
  MINERAL_MIN_AMOUNT: 
   { H: 35000,
     O: 35000,
     L: 35000,
     K: 35000,
     Z: 35000,
     U: 35000,
     X: 35000 },
  MINERAL_RANDOM_FACTOR: 2,
  MINERAL_DENSITY: { '1': 15000, '2': 35000, '3': 70000, '4': 100000 },
  MINERAL_DENSITY_PROBABILITY: { '1': 0.1, '2': 0.5, '3': 0.9, '4': 1 },
  MINERAL_DENSITY_CHANGE: 0.05,
  DENSITY_LOW: 1,
  DENSITY_MODERATE: 2,
  DENSITY_HIGH: 3,
  DENSITY_ULTRA: 4,
  TERMINAL_CAPACITY: 300000,
  TERMINAL_HITS: 3000,
  TERMINAL_SEND_COST: 0.1,
  TERMINAL_MIN_SEND: 100,
  TERMINAL_COOLDOWN: 10,
  CONTAINER_HITS: 250000,
  CONTAINER_CAPACITY: 2000,
  CONTAINER_DECAY: 5000,
  CONTAINER_DECAY_TIME: 100,
  CONTAINER_DECAY_TIME_OWNED: 500,
  NUKER_HITS: 1000,
  NUKER_COOLDOWN: 100000,
  NUKER_ENERGY_CAPACITY: 300000,
  NUKER_GHODIUM_CAPACITY: 5000,
  NUKE_LAND_TIME: 50000,
  NUKE_RANGE: 10,
  NUKE_DAMAGE: { '0': 10000000, '2': 5000000 },
  TOMBSTONE_DECAY_PER_PART: 5,
  PORTAL_DECAY: 30000,
  ORDER_SELL: 'sell',
  ORDER_BUY: 'buy',
  MARKET_FEE: 0.05,
  FLAGS_LIMIT: 10000,
  SUBSCRIPTION_TOKEN: 'token',
  RESOURCE_ENERGY: 'energy',
  RESOURCE_POWER: 'power',
  RESOURCE_HYDROGEN: 'H',
  RESOURCE_OXYGEN: 'O',
  RESOURCE_UTRIUM: 'U',
  RESOURCE_LEMERGIUM: 'L',
  RESOURCE_KEANIUM: 'K',
  RESOURCE_ZYNTHIUM: 'Z',
  RESOURCE_CATALYST: 'X',
  RESOURCE_GHODIUM: 'G',
  RESOURCE_HYDROXIDE: 'OH',
  RESOURCE_ZYNTHIUM_KEANITE: 'ZK',
  RESOURCE_UTRIUM_LEMERGITE: 'UL',
  RESOURCE_UTRIUM_HYDRIDE: 'UH',
  RESOURCE_UTRIUM_OXIDE: 'UO',
  RESOURCE_KEANIUM_HYDRIDE: 'KH',
  RESOURCE_KEANIUM_OXIDE: 'KO',
  RESOURCE_LEMERGIUM_HYDRIDE: 'LH',
  RESOURCE_LEMERGIUM_OXIDE: 'LO',
  RESOURCE_ZYNTHIUM_HYDRIDE: 'ZH',
  RESOURCE_ZYNTHIUM_OXIDE: 'ZO',
  RESOURCE_GHODIUM_HYDRIDE: 'GH',
  RESOURCE_GHODIUM_OXIDE: 'GO',
  RESOURCE_UTRIUM_ACID: 'UH2O',
  RESOURCE_UTRIUM_ALKALIDE: 'UHO2',
  RESOURCE_KEANIUM_ACID: 'KH2O',
  RESOURCE_KEANIUM_ALKALIDE: 'KHO2',
  RESOURCE_LEMERGIUM_ACID: 'LH2O',
  RESOURCE_LEMERGIUM_ALKALIDE: 'LHO2',
  RESOURCE_ZYNTHIUM_ACID: 'ZH2O',
  RESOURCE_ZYNTHIUM_ALKALIDE: 'ZHO2',
  RESOURCE_GHODIUM_ACID: 'GH2O',
  RESOURCE_GHODIUM_ALKALIDE: 'GHO2',
  RESOURCE_CATALYZED_UTRIUM_ACID: 'XUH2O',
  RESOURCE_CATALYZED_UTRIUM_ALKALIDE: 'XUHO2',
  RESOURCE_CATALYZED_KEANIUM_ACID: 'XKH2O',
  RESOURCE_CATALYZED_KEANIUM_ALKALIDE: 'XKHO2',
  RESOURCE_CATALYZED_LEMERGIUM_ACID: 'XLH2O',
  RESOURCE_CATALYZED_LEMERGIUM_ALKALIDE: 'XLHO2',
  RESOURCE_CATALYZED_ZYNTHIUM_ACID: 'XZH2O',
  RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE: 'XZHO2',
  RESOURCE_CATALYZED_GHODIUM_ACID: 'XGH2O',
  RESOURCE_CATALYZED_GHODIUM_ALKALIDE: 'XGHO2',
  REACTIONS: 
   { H: { O: 'OH', L: 'LH', K: 'KH', U: 'UH', Z: 'ZH', G: 'GH' },
     O: { H: 'OH', L: 'LO', K: 'KO', U: 'UO', Z: 'ZO', G: 'GO' },
     Z: { K: 'ZK', H: 'ZH', O: 'ZO' },
     L: { U: 'UL', H: 'LH', O: 'LO' },
     K: { Z: 'ZK', H: 'KH', O: 'KO' },
     G: { H: 'GH', O: 'GO' },
     U: { L: 'UL', H: 'UH', O: 'UO' },
     OH: 
      { UH: 'UH2O',
        UO: 'UHO2',
        ZH: 'ZH2O',
        ZO: 'ZHO2',
        KH: 'KH2O',
        KO: 'KHO2',
        LH: 'LH2O',
        LO: 'LHO2',
        GH: 'GH2O',
        GO: 'GHO2' },
     X: 
      { UH2O: 'XUH2O',
        UHO2: 'XUHO2',
        LH2O: 'XLH2O',
        LHO2: 'XLHO2',
        KH2O: 'XKH2O',
        KHO2: 'XKHO2',
        ZH2O: 'XZH2O',
        ZHO2: 'XZHO2',
        GH2O: 'XGH2O',
        GHO2: 'XGHO2' },
     ZK: { UL: 'G' },
     UL: { ZK: 'G' },
     LH: { OH: 'LH2O' },
     ZH: { OH: 'ZH2O' },
     GH: { OH: 'GH2O' },
     KH: { OH: 'KH2O' },
     UH: { OH: 'UH2O' },
     LO: { OH: 'LHO2' },
     ZO: { OH: 'ZHO2' },
     KO: { OH: 'KHO2' },
     UO: { OH: 'UHO2' },
     GO: { OH: 'GHO2' },
     LH2O: { X: 'XLH2O' },
     KH2O: { X: 'XKH2O' },
     ZH2O: { X: 'XZH2O' },
     UH2O: { X: 'XUH2O' },
     GH2O: { X: 'XGH2O' },
     LHO2: { X: 'XLHO2' },
     UHO2: { X: 'XUHO2' },
     KHO2: { X: 'XKHO2' },
     ZHO2: { X: 'XZHO2' },
     GHO2: { X: 'XGHO2' } },
  BOOSTS: 
   { work: 
      { UO: [Object],
        UHO2: [Object],
        XUHO2: [Object],
        LH: [Object],
        LH2O: [Object],
        XLH2O: [Object],
        ZH: [Object],
        ZH2O: [Object],
        XZH2O: [Object],
        GH: [Object],
        GH2O: [Object],
        XGH2O: [Object] },
     attack: { UH: [Object], UH2O: [Object], XUH2O: [Object] },
     ranged_attack: { KO: [Object], KHO2: [Object], XKHO2: [Object] },
     heal: { LO: [Object], LHO2: [Object], XLHO2: [Object] },
     carry: { KH: [Object], KH2O: [Object], XKH2O: [Object] },
     move: { ZO: [Object], ZHO2: [Object], XZHO2: [Object] },
     tough: { GO: [Object], GHO2: [Object], XGHO2: [Object] } },
  REACTION_TIME: 
   { OH: 20,
     ZK: 5,
     UL: 5,
     UH: 10,
     UH2O: 5,
     XUH2O: 60,
     UO: 10,
     UHO2: 5,
     XUHO2: 60,
     KH: 10,
     KH2O: 5,
     XKH2O: 60,
     KO: 10,
     KHO2: 5,
     XKHO2: 60,
     LH: 15,
     LH2O: 10,
     XLH2O: 65,
     LO: 10,
     LHO2: 5,
     XLHO2: 60,
     ZH: 20,
     ZH2O: 40,
     XZH2O: 160,
     ZO: 10,
     ZHO2: 5,
     XZHO2: 60,
     GH: 10,
     GH2O: 15,
     XGH2O: 80,
     GO: 10,
     GHO2: 30,
     XGHO2: 150 },
  PORTAL_UNSTABLE: 864000000,
  PORTAL_MIN_TIMEOUT: 1036800000,
  PORTAL_MAX_TIMEOUT: 1900800000,
  POWER_BANK_RESPAWN_TIME: 50000,
  INVADERS_ENERGY_GOAL: 100000,
  SYSTEM_USERNAME: 'Screeps',
  SIGN_NOVICE_AREA: 'A new Novice Area is being planned somewhere in this sector. Please make sure all important rooms are reserved.',
  SIGN_RESPAWN_AREA: 'A new Respawn Area is being planned somewhere in this sector. Please make sure all important rooms are reserved.',
  BODYPARTS_ALL: 
   [ 'move',
     'work',
     'carry',
     'attack',
     'ranged_attack',
     'tough',
     'heal',
     'claim' ],
  RESOURCES_ALL: 
   [ 'energy',
     'power',
     'H',
     'O',
     'U',
     'K',
     'L',
     'Z',
     'X',
     'G',
     'OH',
     'ZK',
     'UL',
     'UH',
     'UO',
     'KH',
     'KO',
     'LH',
     'LO',
     'ZH',
     'ZO',
     'GH',
     'GO',
     'UH2O',
     'UHO2',
     'KH2O',
     'KHO2',
     'LH2O',
     'LHO2',
     'ZH2O',
     'ZHO2',
     'GH2O',
     'GHO2',
     'XUH2O',
     'XUHO2',
     'XKH2O',
     'XKHO2',
     'XLH2O',
     'XLHO2',
     'XZH2O',
     'XZHO2',
     'XGH2O',
     'XGHO2' ],
  COLORS_ALL: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ],
  Game: 
   { creeps: { Carter: [Object] },
     spawns: { Spawn1: [Object] },
     structures: { '8a6ecdfb870d44b': [Object], '4b65cdfb889d868': [Object] },
     flags: {},
     constructionSites: {},
     rooms: { W0N1: [Object] },
     time: 2,
     cpuLimit: 500,
     cpu: 
      { getUsed: [Function: getUsed],
        tickLimit: 500,
        limit: 100,
        bucket: 10000 },
     map: 
      { findRoute: [Function: findRoute],
        findExit: [Function: findExit],
        describeExits: [Function: describeExits],
        isRoomProtected: [Function: isRoomProtected],
        isRoomAvailable: [Function: isRoomAvailable],
        getTerrainAt: [Function: getTerrainAt],
        getRoomLinearDistance: [Function: getRoomLinearDistance],
        getWorldSize: [Function: getWorldSize] },
     gcl: { level: 1, progress: 1, progressTotal: 1000000 },
     market: 
      { calcTransactionCost: [Function],
        getAllOrders: [Function],
        getOrderById: [Function],
        createOrder: [Function],
        cancelOrder: [Function],
        deal: [Function],
        changeOrderPrice: [Function],
        extendOrder: [Function],
        credits: [Getter],
        incomingTransactions: [Getter],
        outgoingTransactions: [Getter],
        orders: [Getter] },
     resources: { token: 0 },
     getObjectById: [Function: getObjectById],
     notify: [Function: notify],
     shard: { name: 'pblack.local', type: 'normal', ptr: false } },
  require: 
   { [Function]
     cache: 
      { lodash: [Object],
        main: [Object],
        'util.traveler': [Object],
        'proto.spawn': {},
        'util.constants': [Object],
        'role.harvester': [Function: Harvester],
        'role.builder': [Function: Builder],
        'class.Role': [Function: Role],
        'class.private.Depositer': [Function: Depositer],
        'class.private.Extractor': [Function: Extractor],
        'role.upgrader': [Function: Upgrader],
        'role.repairer': [Function: Repairer],
        'role.defenseBuilder': [Function: DefenseBuilder],
        'role.claimnant': [Function: Claimnant],
        'role.scout': [Function: Scout],
        'role.miner': [Function: Miner],
        'role.grunt': [Function: Grunt],
        'role.lorry': [Function: Lorry],
        'proto.room': {},
        'util.architect': {},
        'proto.flag': {},
        'proto.tower': {},
        'proto.source': {},
        'proto.util.source': [Object],
        'class.RoomCommander': [Function: RoomCommander],
        'class.RoomDecorator': [Function: RoomDecorator],
        'class.private.roomNeighbors': [Function],
        'class.RoomFurnisher': [Function: RoomFurnisher],
        'class.RoomExpander': [Function: RoomExpander],
        'screeps-profiler': [Object] },
     timestamp: 0 },
  __module: 
   { exports: { loop: [Function] },
     user: '5569cdfb8737317',
     timestamp: 0,
     name: '__mainLoop',
     code: 'module.exports.loop();' },
  global: [Circular],
  module: 
   { exports: 
      { wrap: [Function: wrap],
        enable: [Function: enable],
        output: [Function: output],
        registerObject: [Function: profileObjectFunctions],
        registerFN: [Function: profileFunction],
        registerClass: [Function: profileObjectFunctions] },
     user: '5569cdfb8737317',
     timestamp: 0,
     name: 'screeps-profiler',
     code: '\'use strict\';\n\nlet usedOnStart = 0;\nlet enabled = false;\nlet depth = 0;\n\nfunction AlreadyWrappedError() {\n  this.name = \'AlreadyWrappedError\';\n  this.message = \'Error attempted to double wrap a function.\';\n  this.stack = ((new Error())).stack;\n}\n\nfunction setupProfiler() {\n  depth = 0; // reset depth, this needs to be done each tick.\n  Game.profiler = {\n    stream(duration, filter) {\n      setupMemory(\'stream\', duration || 10, filter);\n    },\n    email(duration, filter) {\n      setupMemory(\'email\', duration || 100, filter);\n    },\n    profile(duration, filter) {\n      setupMemory(\'profile\', duration || 100, filter);\n    },\n    background(filter) {\n      setupMemory(\'background\', false, filter);\n    },\n    restart() {\n      if (Profiler.isProfiling()) {\n        const filter = Memory.profiler.filter;\n        let duration = false;\n        if (!!Memory.profiler.disableTick) {\n          // Calculate the original duration, profile is enabled on the tick after the first call,\n          // so add 1.\n          duration = Memory.profiler.disableTick - Memory.profiler.enabledTick + 1;\n        }\n        const type = Memory.profiler.type;\n        setupMemory(type, duration, filter);\n      }\n    },\n    reset: resetMemory,\n    output: Profiler.output,\n  };\n\n  overloadCPUCalc();\n}\n\nfunction setupMemory(profileType, duration, filter) {\n  resetMemory();\n  const disableTick = Number.isInteger(duration) ? Game.time + duration : false;\n  if (!Memory.profiler) {\n    Memory.profiler = {\n      map: {},\n      totalTime: 0,\n      enabledTick: Game.time + 1,\n      disableTick,\n      type: profileType,\n      filter,\n    };\n  }\n}\n\nfunction resetMemory() {\n  Memory.profiler = null;\n}\n\nfunction overloadCPUCalc() {\n  if (Game.rooms.sim) {\n    usedOnStart = 0; // This needs to be reset, but only in the sim.\n    Game.cpu.getUsed = function getUsed() {\n      return performance.now() - usedOnStart;\n    };\n  }\n}\n\nfunction getFilter() {\n  return Memory.profiler.filter;\n}\n\nconst functionBlackList = [\n  \'getUsed\', // Let\'s avoid wrapping this... may lead to recursion issues and should be inexpensive.\n  \'constructor\', // es6 class constructors need to be called with `new`\n];\n\nfunction wrapFunction(name, originalFunction) {\n  if (originalFunction.profilerWrapped) { throw new AlreadyWrappedError(); }\n  function wrappedFunction() {\n    if (Profiler.isProfiling()) {\n      const nameMatchesFilter = name === getFilter();\n      const start = Game.cpu.getUsed();\n      if (nameMatchesFilter) {\n        depth++;\n      }\n      const result = originalFunction.apply(this, arguments);\n      if (depth > 0 || !getFilter()) {\n        const end = Game.cpu.getUsed();\n        Profiler.record(name, end - start);\n      }\n      if (nameMatchesFilter) {\n        depth--;\n      }\n      return result;\n    }\n\n    return originalFunction.apply(this, arguments);\n  }\n\n  wrappedFunction.profilerWrapped = true;\n  wrappedFunction.toString = () =>\n    `// screeps-profiler wrapped function:\\n${originalFunction.toString()}`;\n\n  return wrappedFunction;\n}\n\nfunction hookUpPrototypes() {\n  Profiler.prototypes.forEach(proto => {\n    profileObjectFunctions(proto.val, proto.name);\n  });\n}\n\nfunction profileObjectFunctions(object, label) {\n  const objectToWrap = object.prototype ? object.prototype : object;\n\n  Object.getOwnPropertyNames(objectToWrap).forEach(functionName => {\n    const extendedLabel = `${label}.${functionName}`;\n\n    const isBlackListed = functionBlackList.indexOf(functionName) !== -1;\n    if (isBlackListed) {\n      return;\n    }\n\n    const descriptor = Object.getOwnPropertyDescriptor(objectToWrap, functionName);\n    if (!descriptor) {\n      return;\n    }\n\n    const hasAccessor = descriptor.get || descriptor.set;\n    if (hasAccessor) {\n      const configurable = descriptor.configurable;\n      if (!configurable) {\n        return;\n      }\n\n      const profileDescriptor = {};\n\n      if (descriptor.get) {\n        const extendedLabelGet = `${extendedLabel}:get`;\n        profileDescriptor.get = profileFunction(descriptor.get, extendedLabelGet);\n      }\n\n      if (descriptor.set) {\n        const extendedLabelSet = `${extendedLabel}:set`;\n        profileDescriptor.set = profileFunction(descriptor.set, extendedLabelSet);\n      }\n\n      Object.defineProperty(objectToWrap, functionName, profileDescriptor);\n      return;\n    }\n\n    const isFunction = typeof descriptor.value === \'function\';\n    if (!isFunction) {\n      return;\n    }\n    const originalFunction = objectToWrap[functionName];\n    objectToWrap[functionName] = profileFunction(originalFunction, extendedLabel);\n  });\n\n  return objectToWrap;\n}\n\nfunction profileFunction(fn, functionName) {\n  const fnName = functionName || fn.name;\n  if (!fnName) {\n    console.log(\'Couldn\\\'t find a function name for - \', fn);\n    console.log(\'Will not profile this function.\');\n    return fn;\n  }\n\n  return wrapFunction(fnName, fn);\n}\n\nconst Profiler = {\n  printProfile() {\n    console.log(Profiler.output());\n  },\n\n  emailProfile() {\n    Game.notify(Profiler.output(1000));\n  },\n\n  output(passedOutputLengthLimit) {\n    const outputLengthLimit = passedOutputLengthLimit || 1000;\n    if (!Memory.profiler || !Memory.profiler.enabledTick) {\n      return \'Profiler not active.\';\n    }\n\n    const endTick = Math.min(Memory.profiler.disableTick || Game.time, Game.time);\n    const startTick = Memory.profiler.enabledTick + 1;\n    const elapsedTicks = endTick - startTick;\n    const header = \'calls\\t\\ttime\\t\\tavg\\t\\tfunction\';\n    const footer = [\n      `Avg: ${(Memory.profiler.totalTime / elapsedTicks).toFixed(2)}`,\n      `Total: ${Memory.profiler.totalTime.toFixed(2)}`,\n      `Ticks: ${elapsedTicks}`,\n    ].join(\'\\t\');\n\n    const lines = [header];\n    let currentLength = header.length + 1 + footer.length;\n    const allLines = Profiler.lines();\n    let done = false;\n    while (!done && allLines.length) {\n      const line = allLines.shift();\n      // each line added adds the line length plus a new line character.\n      if (currentLength + line.length + 1 < outputLengthLimit) {\n        lines.push(line);\n        currentLength += line.length + 1;\n      } else {\n        done = true;\n      }\n    }\n    lines.push(footer);\n    return lines.join(\'\\n\');\n  },\n\n  lines() {\n    const stats = Object.keys(Memory.profiler.map).map(functionName => {\n      const functionCalls = Memory.profiler.map[functionName];\n      return {\n        name: functionName,\n        calls: functionCalls.calls,\n        totalTime: functionCalls.time,\n        averageTime: functionCalls.time / functionCalls.calls,\n      };\n    }).sort((val1, val2) => {\n      return val2.totalTime - val1.totalTime;\n    });\n\n    const lines = stats.map(data => {\n      return [\n        data.calls,\n        data.totalTime.toFixed(1),\n        data.averageTime.toFixed(3),\n        data.name,\n      ].join(\'\\t\\t\');\n    });\n\n    return lines;\n  },\n\n  prototypes: [\n    { name: \'Game\', val: Game },\n    { name: \'Room\', val: Room },\n    { name: \'Structure\', val: Structure },\n    { name: \'Spawn\', val: Spawn },\n    { name: \'Creep\', val: Creep },\n    { name: \'RoomPosition\', val: RoomPosition },\n    { name: \'Source\', val: Source },\n    { name: \'Flag\', val: Flag },\n  ],\n\n  record(functionName, time) {\n    if (!Memory.profiler.map[functionName]) {\n      Memory.profiler.map[functionName] = {\n        time: 0,\n        calls: 0,\n      };\n    }\n    Memory.profiler.map[functionName].calls++;\n    Memory.profiler.map[functionName].time += time;\n  },\n\n  endTick() {\n    if (Game.time >= Memory.profiler.enabledTick) {\n      const cpuUsed = Game.cpu.getUsed();\n      Memory.profiler.totalTime += cpuUsed;\n      Profiler.report();\n    }\n  },\n\n  report() {\n    if (Profiler.shouldPrint()) {\n      Profiler.printProfile();\n    } else if (Profiler.shouldEmail()) {\n      Profiler.emailProfile();\n    }\n  },\n\n  isProfiling() {\n    if (!enabled || !Memory.profiler) {\n      return false;\n    }\n    return !Memory.profiler.disableTick || Game.time <= Memory.profiler.disableTick;\n  },\n\n  type() {\n    return Memory.profiler.type;\n  },\n\n  shouldPrint() {\n    const streaming = Profiler.type() === \'stream\';\n    const profiling = Profiler.type() === \'profile\';\n    const onEndingTick = Memory.profiler.disableTick === Game.time;\n    return streaming || (profiling && onEndingTick);\n  },\n\n  shouldEmail() {\n    return Profiler.type() === \'email\' && Memory.profiler.disableTick === Game.time;\n  },\n};\n\nmodule.exports = {\n  wrap(callback) {\n    if (enabled) {\n      setupProfiler();\n    }\n\n    if (Profiler.isProfiling()) {\n      usedOnStart = Game.cpu.getUsed();\n\n      // Commented lines are part of an on going experiment to keep the profiler\n      // performant, and measure certain types of overhead.\n\n      // var callbackStart = Game.cpu.getUsed();\n      const returnVal = callback();\n      // var callbackEnd = Game.cpu.getUsed();\n      Profiler.endTick();\n      // var end = Game.cpu.getUsed();\n\n      // var profilerTime = (end - start) - (callbackEnd - callbackStart);\n      // var callbackTime = callbackEnd - callbackStart;\n      // var unaccounted = end - profilerTime - callbackTime;\n      // console.log(\'total-\', end, \'profiler-\', profilerTime, \'callbacktime-\',\n      // callbackTime, \'start-\', start, \'unaccounted\', unaccounted);\n      return returnVal;\n    }\n\n    return callback();\n  },\n\n  enable() {\n    enabled = true;\n    hookUpPrototypes();\n  },\n\n  output: Profiler.output,\n\n  registerObject: profileObjectFunctions,\n  registerFN: profileFunction,\n  registerClass: profileObjectFunctions,\n};\n' } }
stop
Got SIGTERM, disabling queue fetching
Storage connection lost
Storage connection lost
Loading mods from "/Users/pblack/code/mine/screeps/main/screeps/spec/server/db.json"
Connecting to storage
New child runtime process 21744
Loading mods from "/Users/pblack/code/mine/screeps/main/screeps/spec/server/db.json"
Connecting to storage
Got SIGTERM, disabling queue fetching
Storage connection lost
Storage connection lost
